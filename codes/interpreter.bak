#lang racket



(require parser-tools/lex
         parser-tools/yacc
         (prefix-in : parser-tools/lex-sre)
         (prefix-in re: parser-tools/lex-sre)
         (only-in pict cc-superimpose disk filled-rectangle text)
         pict/tree-layout
         syntax/readerr)

(require dyoo-while-loop)

(require loop)

(define-lex-abbrevs
  [string-content (union (char-complement (char-set "\"\n")))]
  [string-literal (union (concatenation #\" (repetition 0 +inf.0 string-content) #\")
                         "\"\\n\"" "\"\\\\\"")]
  [var        (:or (:+ alphabetic) (:: (:+ alphabetic) #\_ (:+ alphabetic)))]
  [string     (:: #\" (:* (complement "*/")) #\")]
  [digit      (:or (:+ (char-range #\0 #\9)) (:: (:+ (char-range #\0 #\9)) #\. (:+ (char-range #\0 #\9))) (::  #\0 #\. (:+ (char-range #\0 #\9))) )]
)



(define simple-math-lexer
           (lexer
            [string-literal (token-STRING lexeme)]
            [(:+ digit)  (token-NUM (string->number lexeme))]
            ("+" (token-PLUS))
            ("-" (token-MINUS))
            ("*" (token-MULT))
            ("/" (token-DIV))
            ("(" (token-LPARAN))
            (")" (token-RPARAN))
            ("[" (token-LBARAK))
            ("]" (token-RBARAK))
            ("{" (token-LCBRACK))
            ("}" (token-RCBRACK))
            ("," (token-CAMA))
            (";" (token-SEMICOLON))
            ("=" (token-EQUAL))
            ("==" (token-EQUALEQUAL))
            ("!=" (token-NOTEQUAL))
            ("<" (token-LESS))
            (">" (token-GREATER))
            ("while" (token-WHILE))
            ("do" (token-DO))
            ("end" (token-END))
            ("if" (token-IF))
            ("then" (token-THEN))
            ("else" (token-ELSE))
            ("endif" (token-ENDIF))
            ("return" (token-RETURN))
            ("true" (token-TRUE))
            ("false" (token-FALSE))
            ("null" (token-NULL))
            ("func" (token-FUNC))
            
            ;[(:or "<" ">" "==" "=" "!=" "-" "+" "/" "*" "(" ")" "[" "]" "," ";") (string->symbol lexeme)]
            ;[(:or "while" "do" "end" "if" "then" "else" "endif" "return" "true" "false") (string->symbol lexeme)]
            [var    (token-ID (string->symbol lexeme))]
            [whitespace (simple-math-lexer input-port)]
            [(eof) (token-EOF)]))


   

(define-tokens a (NUM ID STRING))
(define-empty-tokens b (EOF WHILE DO END IF THEN ELSE ENDIF RETURN TRUE FALSE SEMICOLON CAMA NOTEQUAL EQUAL EQUALEQUAL GREATER LESS MINUS PLUS MULT DIV LPARAN RPARAN LBARAK RBARAK LCBRACK RCBRACK NULL FUNC))



;parser
(define-struct run-cmd (unitcom command) #:transparent)
(define-struct if-com (exp then_com else_com) #:transparent)
(define-struct while-com (exp com) #:transparent)
(define-struct assign (var exp) #:transparent)
(define-struct assign-func (var func) #:transparent)
(define-struct assign-call (var call) #:transparent)
(define-struct return (exp) #:transparent)
(define-struct arith-exp (op bexp1 bexp2) #:transparent)
(define-struct num-exp (n) #:transparent)
(define-struct var-exp (var) #:transparent)
(define-struct bool-exp (bool) #:transparent)
(define-struct null-exp () #:transparent)
(define-struct str-exp (str) #:transparent)
(define-struct unequal-exp (op aexp1 aexp2) #:transparent)
(define-struct equal_equal-exp (aexp1 aexp2) #:transparent)
(define-struct not_equal-exp (aexp1 aexp2) #:transparent)
(define-struct list-exp (lst) #:transparent)
(define-struct list_acc-exp (var listmem) #:transparent)
(define-struct parentheses-exp (exp) #:transparent)
(define-struct neg-exp (exp) #:transparent)
(define-struct func-exp (vars-lst body) #:transparent)
(define-struct func-var (p-name b-vars-lst body env) #:transparent)
(define-struct call-exp (func args-lst) #:transparent)
(define-struct a-thunk (exp env) #:transparent)


(define function
  (lambda (p-name vars-lst body env)
    (lambda (vals-lst)
      (if (> (length vars-lst) (length vals-lst))
          (error 'TypeError "~a() missing ~a required argument(s)" p-name (- (length vars-lst) (length vals-lst)))
          [begin
            (if (< (length vars-lst) (length vals-lst))
                (error 'TypeError "~a() takes ~a argument(s) but ~a were given" p-name (length vars-lst) (length vals-lst))
                [begin
                  (for ([i (length vars-lst)])
                    (set! env (extend-env (list-ref vars-lst i) (list-ref vals-lst i) env)))])])
      (eval body env))))

(define apply-function
  (lambda (func1 vals-lst)
    (set! return_value (func1 vals-lst))
    (set! end #f)
    return_value))

;;;;;;
      
(define empty-env
  (lambda () '()))

(define extend-env
  (lambda (var val env)
    (cons (cons var val) env)))

(define extend-env-rec
  (lambda (p-name b-vars-lst body env)
    (cons (make-func-var p-name b-vars-lst body env) env)))

(define apply-env
  (lambda (initial-env search-var)
    (letrec ((loop (lambda (env)
                     (cond ((null? env)
                            (report-no-binding-found search-var initial-env))
                           ((and (pair? env) (pair? (car env)))
                            (let ((saved-var (caar env))
                                  (saved-val (cdar env))
                                  (saved-env (cdr env)))
                              (if (eqv? search-var saved-var)
                                  saved-val
                                  (loop saved-env))))
                           ((and (pair? env) (func-var? (car env)))
                            (let ((func1 (car env))
                                  (saved-env (cdr env)))
                              (if (eqv? search-var (func-var-p-name func1))
                                  (function (func-var-p-name func1) (func-var-b-vars-lst func1) (func-var-body func1) env)
                                  (loop saved-env)))
                            )
                           (else
                            (report-invalid-env initial-env))))))
      (loop initial-env))))

(define report-no-binding-found
  (lambda (search-var env)
    (error 'apply-env "No binding for ~a in ~s" search-var env)))

(define report-invalid-env
  (lambda (env)
    (error 'apply-env "Bad environment ~s" env)))


;;;;;;;
(define init-env
(lambda ()
(empty-env)))

(define initial-env (init-env))

(define (while condition body)
  (when (condition)
    (body)
    (while condition body)))

(define addToList
  (lambda (a b) 
    (cond ((null? a) (list b)) ; result needs to be a list
          ;((null? b) a)
          ((cons (car a) (addToList (cdr a) b))))))

(define neglist
  (lambda (lst)
    (cond
      [(null? lst) '()]
      [(boolean? (car lst)) (cons (not (car lst)) (neglist (cdr lst)))]
      [(number? (car lst)) (cons (- 0 (car lst)) (neglist (cdr lst)))]
      [(list? (car lst)) (cons (neglist (car lst)) (neglist (cdr lst)))]
      [else (error 'TypeError "bad operand type for unary -: '~a'" (typeof (car lst)))]
      )))

;;;;;;
(define simple-math-parser
           (parser
            (start command)
            (end EOF)
            (error void)
            (tokens a b)
            (grammar
             (command ((unitcom) $1)
                      ((command SEMICOLON unitcom) (make-run-cmd $1 $3)))
             (unitcom ((WHILE exp DO command END) (make-while-com $2 $4))
                      ((IF exp THEN command ELSE command ENDIF) (make-if-com $2 $4 $6))
                      ((ID EQUAL exp) (make-assign $1 $3))
                      ((ID EQUAL FUNCTION) (make-assign-func $1 $3))
                      ((ID EQUAL CALL) (make-assign-call $1 $3))
                      ((RETURN exp) (return $2)))
             (exp ((aexp) $1)
                  ((aexp GREATER aexp) (make-unequal-exp > $1 $3))
                  ((aexp LESS aexp) (make-unequal-exp < $1 $3))
                  ((aexp EQUALEQUAL aexp) (make-equal_equal-exp $1 $3))
                  ((aexp NOTEQUAL aexp) (make-not_equal-exp $1 $3)))
             (aexp ((bexp) $1)
                   ((bexp MINUS aexp) (make-arith-exp - $1 $3))
                   ((bexp PLUS aexp) (make-arith-exp + $1 $3)))
             (bexp ((cexp) $1)
                   ((cexp MULT bexp) (make-arith-exp * $1 $3))
                   ((cexp DIV bexp) (make-arith-exp / $1 $3)))
             (cexp ((MINUS cexp) (make-neg-exp  $2))   
                   ((LPARAN exp RPARAN) (make-parentheses-exp $2))
                   ((NUM) (num-exp $1))
                   ((NULL) (null-exp))
                   ((ID) (var-exp $1))
                   ((TRUE) (bool-exp #t))
                   ((FALSE) (bool-exp #f))
                   ((STRING) (str-exp (substring $1 1 (- (string-length $1) 1))))
                   ((list) $1)
                   ((ID listmem) (make-list_acc-exp $1 $2)))
             (list ((LBARAK listValues RBARAK) (make-list-exp $2))
                   ((LBARAK RBARAK) (list '())))
             (listValues ((exp) (list $1))
                         ((exp CAMA listValues) (cons $1 $3)))
             (listmem ((LBARAK exp RBARAK) (list $2))
                      ((LBARAK exp RBARAK listmem) (cons $2 $4)))
             (FUNCTION ((FUNC LPARAN VARS RPARAN LCBRACK command RCBRACK) (make-func-exp $3 $6)))
             (VARS ((ID) (list $1))
                   ((ID CAMA VARS) (cons $1 $3)))
             (CALL ((ID LPARAN ARGS RPARAN) (make-call-exp $1 $3)))
             (ARGS ((exp) (list $1))
                   ((exp CAMA ARGS) (cons $1 $3)))
             )))


(define (typeof exp)
  (cond
    [(string? exp) 'string]
    [(boolean? exp) 'boolean]
    [(equal? 'null exp) 'null]
    [(number? exp) 'number]
    [else 'list]))

(define end #f)
(define return_value 0)
(define env_change #f)


(define value-of-operand
  (lambda (exp env)
    (match exp
      [(var-exp var) (apply-env env var)]
      [else (make-a-thunk exp env)])))

(define value-of-thunk
  (lambda (th)
    (match th
      [(a-thunk exp1 saved-env) (subst exp1 saved-env)])))



(define (eval parsed-exp env)

  (match parsed-exp
    
    ((run-cmd unitcom comm)
     (set! env (eval unitcom env))
     (if (not end)
         [begin
           (set! env (eval comm env))
           env]
         [begin
           return_value]))

    ((while-com exp com)
     (define condition (subst exp env))
     (if (and (number? condition) (equal? (exact->inexact condition) 0.0)) (set! condition #f) '())
     (loop go ([condition condition])
           (cond
            [condition [begin
                         (set! env (eval com env))
                         (let ([flag (subst exp env)])
                           (go (and (not (and (number? flag) (equal? (exact->inexact flag) 0.0))) flag)))]]
            [else '()]))
     env)
    
    ((if-com exp thencom elsecom)
     (let ([flag (subst exp env)])
       (if (and (not (and (number? flag) (equal? (exact->inexact flag) 0.0))) flag)
           (set! env (eval thencom env))
           (set! env (eval elsecom env)))
       )
     env)
    
    ((assign var exp)
     (set! env (extend-env var (value-of-operand exp env) env))
     env
     )

    ((assign-func var func1)
     (set! env (extend-env-rec var (func-exp-vars-lst func1) (func-exp-body func1) env))
     env
     )

    ((assign-call var call)
     (set! env (extend-env var (value-of-operand call env) env))
     env
     )

    ((return exp)
     (set! return_value (subst exp env))
     (set! end #t)
     return_value
     )
      
    ))

(define (subst exp env)
  (match exp

    ((call-exp func1 args-lst)
     (let ((proc (apply-env env func1)))
       (if (procedure? proc)
           [begin
             (let ((args (list)))
               (for ([i (length args-lst)])
                 (set! args (append args (list (value-of-operand (list-ref args-lst i) env)))))
               (apply-function proc args))]
           (error 'TypeError "~a object is not callable" (typeof proc)))))

    ((list_acc-exp var listmem)
     (define lst (apply-env env var))
     (define idx '())
     (define tmp '())
     (define o '())
     (if (list? lst)
         (begin
           (for ([i listmem])
             (let ([x (subst i env)])
               (cond [(not (number? x)) (error 'TypeError "list indices must be integers or slices, not ~a" (typeof x))]
                     [(not (exact-integer? x)) (error 'TypeError "list indices must be integers or slices, not float")]
                     [(< x 0) (error 'IndexError "negative index")]
                     [else (set! idx (addToList idx x))])
         
               ))
           (let  ([n (length idx)])
             (set! tmp lst)
             (for [(x (in-range 0 n 1))]
               (if (< x (sub1 n)) (begin
                                    (if (not(list? tmp)) (error 'TypeError "'~a' object is not subscriptable" (typeof tmp))
                                        (if (> (list-ref idx x) (sub1 (length tmp))) (error 'IndexError "list index out of range")
                                            (set! tmp (list-ref tmp (list-ref idx x)))
                                            )))
                   (begin
                     (if (not(list? tmp)) (error 'TypeError "'~a' object is not subscriptable" (typeof tmp))
                         (if (> (list-ref idx x) (sub1 (length tmp))) (error 'IndexError "list index out of range")
                             (set! o (addToList o (list-ref tmp (list-ref idx x))))
                             ))
                     ))
               ))) 
         (error 'TypeError "'~a' object is not subscriptable" (typeof lst)))
     (car o)
     )

    ((list-exp lst)
     (define l '())
     (for ([i lst])
       (set! l (addToList l (subst i env))) 
       )
     l
     )

    ((parentheses-exp exp)
     (subst exp env)
     )

   ((neg-exp exp)
     (let ([o (subst exp env)])
        (cond
                   [(boolean? o) (not o)]
                   [(number? o)  (- 0 o)]
                   [(list? o)  (neglist o) ]
                   [else
                    (error 'TypeError "bad operand type for unary -: '~a'" (typeof o))
                    ]
                   ))
     )

    
    ((unequal-exp op e1 e2)
     (let ([op1 (subst e1 env)] [op2 (subst e2 env)])
       (cond
         [(or (boolean? op1) (equal? 'null op1) (and (list? op1) (not (null? op1)) (or (boolean? (car op1)) (equal? 'null (car op1))))
              (boolean? op2) (equal? 'null op2) (and (list? op2) (not (null? op2)) (or (boolean? (car op2)) (equal? 'null (car op2)))))
          (error 'TypeError "'~a' not supported between instances of '~a' and '~a'"
                 (cond [(equal? op <) '<] [else '>])
                 (cond [(and (list? op1) (not (null? op1))) (typeof (car op1))]
                       [else (typeof op1)])
                 (cond [(and (list? op2) (not (null? op2))) (typeof (car op2))]
                       [else (typeof op2)]))]

         [(and (list? op1) (list? op2))
          (error 'TypeError "'~a' not supported between instances of '~a' and '~a'" (cond [(equal? op <) '<] [else '>]) (typeof op1) (typeof op2))]

         [(or (null? op1) (null? op2)) #f]
         
         [(and (list? op1) (number? op2))
          (cond
            [(not (number? (car op1 )))
             (error 'TypeError "'~a' not supported between instances of '~a' and '~a'" (cond [(equal? op <) '<] [else '>]) (typeof (car op1)) (typeof op2))] 
            [(equal? (length op1) 1) (op (car op1 ) op2)]
            [else (if (op (car op1 ) op2)
             (subst (make-unequal-exp op (list (cdr op1)) e2) env)
             #f)])] ;list > number
         
         [(and (number? op1) (list? op2))
          (cond
            [(not (number? (car op2 )))
             (error 'TypeError "'~a' not supported between instances of '~a' and '~a'" (cond [(equal? op <) '<] [else '>]) (typeof op1) (typeof (car op2)))] 
            [(equal? (length op2) 1) (op op1 (car op2 ))]
            [else (if (op op1 (car op2 ))
             (subst (make-unequal-exp op e1 (list (cdr op2))) env)
             #f)])] ;number > list
         
         [(and (list? op1) (string? op2))
          [begin
            (define str_op string<?)
            (cond [(equal? op >) (set! str_op string>?)]
                  [else (set! str_op string<?)])
            (cond
              [(not (string? (car op1 )))
               (error 'TypeError "'~a' not supported between instances of '~a' and '~a'" (cond [(equal? op <) '<] [else '>]) (typeof (car op1)) (typeof op2))]
              [(equal? (length op1) 1) (str_op (car op1 ) op2)]
              [else (if (str_op (car op1 ) op2)
                        (subst (make-unequal-exp op (list (cdr op1)) e2) env)
                        #f)])]] ;list > string
         
         [(and (string? op1) (list? op2))
          [begin
            (define str_op string<?)
            (cond [(equal? op >) (set! str_op string>?)]
                  [else (set! str_op string<?)])
            (cond
              [(not (string? (car op2 )))
               (error 'TypeError "'~a' not supported between instances of '~a' and '~a'" (cond [(equal? op <) '<] [else '>]) (typeof op1) (typeof (car op2)))]
              [(equal? (length op2) 1) (str_op (car op2 ) op1)]
              [else (if (str_op op1 (car op2 ))
                        (subst (make-unequal-exp op e1 (list (cdr op2))) env)
                        #f)])]] ;string > list

         [(and (string? op1) (string? op2))
          (if (equal? op >) (string>? op1 op2) (string<? op1 op2))] ;string > string
         
         [(or (string? op1) (list? op1) (string? op2) (list? op2))
          (error 'TypeError "'~a' not supported between instances of '~a' and '~a'" (cond [(equal? op <) '<] [else '>]) (typeof op1) (typeof op2))]

         [else (op (subst e1 env) (subst e2 env))]
         )))
    
    ((equal_equal-exp e1 e2)
     (let ([op1 (subst e1 env)] [op2 (subst e2 env)])
       (cond
         [(and (equal? 'null op1) (equal? 'null op2)) #t] ;null == null
         
         [(and (list? op1) (list? op2))
          (cond
            [(not (equal? (length op1) (length op2))) #f] 
            [(and (null? op1) (null? op2)) #t]
            [(and (number? (car op1)) (number? (car op2)) (equal? (exact->inexact (car op1 )) (exact->inexact (car op2))))
             (subst (make-equal_equal-exp (list (cdr op1)) (list (cdr op2))) env)] 
            [(equal? (car op1 ) (car op2))
             (subst (make-equal_equal-exp (list (cdr op1)) (list (cdr op2))) env)]
            [else #f])] ;list == list

         [(and (list? op1) (number? op2))
          (cond
            [(null? op1) #f] 
            [(not (number? (car op1 ))) #f]
            [(equal? (exact->inexact (car op1 )) (exact->inexact op2))
             (if (equal? (length op1) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op1)) e2) env))]
            [else #f])] ;list == number

         [(and (list? op2) (number? op1))
          (cond
            [(null? op2) #f]
            [(not (number? (car op2 ))) #f]
            [(equal? (exact->inexact (car op2 )) (exact->inexact op1))
             (if (equal? (length op2) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op2)) e1) env))]
            [else #f])] ;number == list

         [(and (list? op1) (boolean? op2))
          (cond
            [(null? op1) #f]
            [(not (boolean? (car op1 ))) #f]
            [(equal? (car op1 ) op2)
             (if (equal? (length op1) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op1)) e2) env))]
            [else #f])] ;list == bool
       
         [(and (list? op2) (boolean? op1))
          (cond
            [(null? op2) #f]
            [(not (boolean? (car op2 ))) #f]
            [(equal? (car op2 ) op1)
             (if (equal? (length op2) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op2)) e1) env))]
            [else #f])] ;bool == list

         [(and (list? op1) (string? op2))
          (cond
            [(null? op1) #f]
            [(not (string? (car op1 ))) #f]
            [(equal? (car op1 ) op2)
             (if (equal? (length op1) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op1)) e2) env))]
            [else #f])] ;list == string

         [(and (list? op2) (string? op1))
          (cond
            [(null? op2) #f]
            [(not (string? (car op2 ))) #f]
            [(equal? (car op2 ) op1)
             (if (equal? (length op2) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op2)) e1) env))]
            [else #f])] ;string == list

         [(and (list? op1) (equal? 'null op2))
          (cond
            [(null? op1) #f]
            [(not (equal? 'null (car op1 ))) #f]
            [(equal? (car op1 ) op2)
             (if (equal? (length op1) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op1)) e2) env))]
            [else #f])] ;list == null

         [(and (list? op2) (equal? 'null op1))
          (cond
            [(null? op2) #f]
            [(not (equal? 'null (car op2 ))) #f]
            [(equal? (car op2 ) op1)
             (if (equal? (length op2) 1) #t
                 (subst (make-equal_equal-exp (list (cdr op2)) e1) env))]
            [else #f])] ;null == list
       
         [else (if (and (number? op1) (number? op2))
                   (equal? (exact->inexact op1) (exact->inexact op2))
                   (equal? op1 op2))] ;number == number | string == string | bool == bool
        )))

    ((not_equal-exp e1 e2) (not (subst (make-equal_equal-exp e1 e2) env)))
    
    ((arith-exp op e1 e2)
     (let ([op1 (subst e1 env)])
       (if (and (equal? op *) (or (and (number? op1) (equal? (exact->inexact op1) 0.0)) (equal? op1 #f)))
           op1
           [begin
             (let ([op2 (subst e2 env)])
               (cond
         
                 [(and (number? op1) (number? op2))
                  (op op1 op2)]
         
                 [(and (number? op1) (list? op2))
                  (define output '())
                  (if (and (equal? op *) (equal? (exact->inexact op1) 0.0))
                      (set! output 0)
                      [begin
                        (for [(item op2)]
                          (if (not (number? item))
                              (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                                      [(equal? op +) '+]
                                                                                                      [(equal? op -) '-]
                                                                                                      [(equal? op *) '*]
                                                                                                      [(equal? op /) '/])(typeof op1) (typeof item))
                              (set! output (addToList output (op op1 item)))))])
                  output]
         
                 [(and (list? op1) (number? op2))
                  (define output '())
                  (for [(item op1)]
                    (if (not (number? item))
                        (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                                [(equal? op +) '+]
                                                                                                [(equal? op -) '-]
                                                                                                [(equal? op *) '*]
                                                                                                [(equal? op /) '/]) (typeof item) (typeof op2))
                        (set! output (addToList output (op item op2)))))
                  output]
         
                 [(and (boolean? op1) (boolean? op2))
                  (cond
                    [(equal? op +) (if op1 #t op2)]
                    [(equal? op *) (if op1 op2 #f)]
                    [else (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                                  [(equal? op -) '-]
                                                                                                  [(equal? op /) '/]) (typeof op1) (typeof op2))])]
         
                 [(and (boolean? op1) (list? op2))
                  (define output '())
                  (for [(item op2)]
                    (if (not (or (equal? op +) (equal? op *)))
                        (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                                [(equal? op -) '-]
                                                                                                [(equal? op /) '/]) (typeof op1) (typeof op2))
                        (if (not (boolean? item))
                            (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                                    [(equal? op +) '+]
                                                                                                    [(equal? op *) '*]) (typeof op1) (typeof item))
                            (cond
                              [(equal? op +) (if op1 (set! output (addToList output #t)) (set! output (addToList output item)))]
                              [else (if op1 (set! output (addToList output item)) (set! output (addToList output #f)))]))))
                  output]
         
                 [(and (list? op1) (boolean? op2))
                  (define output '())
                  (for [(item op1)]
                    (if (not (or (equal? op +) (equal? op *)))
                        (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                                [(equal? op -) '-]
                                                                                                [(equal? op /) '/]) (typeof op1) (typeof op2))
                        (if (not (boolean? item))
                            (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                                    [(equal? op +) '+]
                                                                                                    [(equal? op *) '*]) (typeof item) (typeof op2))
                            (cond
                              [(equal? op +) (if item (set! output (addToList output #t)) (set! output (addToList output op2)))]
                              [else (if item (set! output (addToList output op2)) (set! output (addToList output #f)))]))))
                  output]
         
                 [(and (string? op1) (string? op2))
                  (if (equal? op +)
                      (string-append op1 op2)
                      (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                              [(equal? op -) '-]
                                                                                              [(equal? op *) '*]
                                                                                              [(equal? op /) '/]) (typeof op1) (typeof op2)))]
                 [(and (string? op1) (list? op2))
                  (define output '())
                  (if (equal? op +)
                      (for [(item op2)]
                        (if (not (string? item))
                            (error 'TypeError "unsupported operand type(s) for +: '~a' and '~a'" (typeof op1) (typeof item))
                            (set! output (addToList output (string-append op1 item)))))
                      (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                              [(equal? op -) '-]
                                                                                              [(equal? op *) '*]
                                                                                              [(equal? op /) '/]) (typeof op1) (typeof op2)))
                  output]
         
                 [(and (list? op1) (string? op2))
                  (define output '())
                  (if (equal? op +)
                      (for [(item op1)]
                        (if (not (string? item))
                            (error 'TypeError "unsupported operand type(s) for +: '~a' and '~a'" (typeof item) (typeof op2))
                            (set! output (addToList output (string-append item op2)))))
                      (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                              [(equal? op -) '-]
                                                                                              [(equal? op *) '*]
                                                                                              [(equal? op /) '/]) (typeof op1) (typeof op2)))
                  output]
         
                 [(and (list? op1) (list? op2))
                  (if (equal? op +)
                      (append op1 op2)
                      (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                              [(equal? op -) '-]
                                                                                              [(equal? op *) '*]
                                                                                              [(equal? op /) '/]) (typeof op1) (typeof op2)))]

                 [else (error 'TypeError "unsupported operand type(s) for ~a: '~a' and '~a'" (cond
                                                                                               [(equal? op +) '+]
                                                                                               [(equal? op -) '-]
                                                                                               [(equal? op *) '*]
                                                                                               [(equal? op /) '/]) (typeof op1) (typeof op2))]
                 ))])))
    
    ((num-exp n) n)
    
    ((bool-exp bool) bool)

    ((str-exp str) str)
    
     ((var-exp var)
      (let ((w (apply-env env var)))
        (if (a-thunk? w)
            (value-of-thunk w)
            w)))

    ((null-exp) 'null)
    
    ((list exp) exp)

    ))



; library functions

(define pow
  (lambda (vals-lst)
    (define result 1)
    (if (not (equal? 2 (length vals-lst)))
        (error 'TypeError "pow expected 2 arguments, got ~a" (length vals-lst))
        [begin
          (let ((a (car vals-lst)) (b (cadr vals-lst)))
            (if (a-thunk? a)
                (set! a (value-of-thunk a))
                '())
            (if (a-thunk? b)
                (set! b (value-of-thunk b))
                '())
            (set! result (expt a b)))])
    result))

(define make_list
  (lambda (vals-lst)
    [cond
     [(not (equal? 2 (length vals-lst))) (error 'TypeError "make_list expected 2 arguments , got ~a" (length vals-lst))]
     [else
      [begin
        (let ((a (car vals-lst)) (b (cadr vals-lst)))
          (if (a-thunk? a)
              (set! a (value-of-thunk a))
              '())
          (if (a-thunk? b)
              (set! b (value-of-thunk b))
              '())
          (if (<= a 0) '()
          (make-list a b)))]]]))

(define reverse
  (lambda (vals-lst)
    (if (not (equal? 1 (length vals-lst)))
        (error 'TypeError "reverse expected 1 arguments, got ~a" (length vals-lst))
        '())
    (let ((a (car vals-lst)))
      (if (a-thunk? a)
          (set! a (value-of-thunk a))
          '())
      (if (<= (length a) 1)
          a
          (append (reverse (list (cdr a))) (list (car a)))))))

(define reverse_all
  (lambda (vals-lst)
    (if (not (equal? 1 (length vals-lst)))
        (error 'TypeError "reverse_all expected 1 arguments, got ~a" (length vals-lst))
        '())
    (let ((a (car vals-lst)))
      (if (a-thunk? a)
          (set! a (value-of-thunk a))
          '())
      (if (null? a) a
          (if (list? (car a))
              (append (reverse_all (list (cdr a))) (cons (reverse_all (list (car a))) '()))
              (append (reverse_all (list (cdr a))) (list (car a))))))))

(define set
  (lambda (vals-lst)
    (if (not (equal? 3 (length vals-lst)))
        (error 'TypeError "set expected 3 arguments, got ~a" (length vals-lst))
        [begin
          (let ((a (car vals-lst)) (index (cadr vals-lst)) (value (caddr vals-lst)))
            (if (a-thunk? a)
                (set! a (value-of-thunk a))
                '())
            (if (a-thunk? index)
                (set! index (value-of-thunk index))
                '())
            (if (a-thunk? value)
                (set! value (value-of-thunk value))
                '())
            (if (>= index (length a))
                (error 'IndexError "list set index out of range")
                (list-set a index value)))])))

(define merge
  (lambda (vals-lst)
    (if (not (equal? 2 (length vals-lst)))
        (error 'TypeError "merge expected 2 arguments, got ~a" (length vals-lst))
        [begin
          (let ((left (car vals-lst)) (right (cadr vals-lst)))
            (if (a-thunk? left)
                (set! left (value-of-thunk left))
                '())
            (if (a-thunk? right)
                (set! right (value-of-thunk right))
                '())
            (cond
              ((null? left)
               right)
              ((null? right)
               left)
              ((> (car left) (car right))
               (cons (car right)
                     (merge (list left (cdr right)))))
              (else
               (cons (car left)
                     (merge (list (cdr left) right))))))])))

(define merge_sort
  (lambda (vals-lst)
    (if (not (equal? 1 (length vals-lst)))
        (error 'TypeError "merge_sort expected 1 arguments, got ~a" (length vals-lst))
        '())
    (let ((a (car vals-lst)))
      (if (a-thunk? a)
          (set! a (value-of-thunk a))
          '())
      (define (merge left right)
        (cond
          ((null? left)
           right)
          ((null? right)
           left)
          ((> (car left) (car right))
           (cons (car right)
                 (merge left (cdr right))))
          (else
           (cons (car left)
                 (merge (cdr left) right)))))
      (define (take l n)
        (if (zero? n)
            (list)
            (cons (car l)
                  (take (cdr l) (- n 1)))))
      (let ((half (quotient (length a) 2)))
        (if (zero? half)
            a
            (merge (merge_sort (list (take      a half)))
                   (merge_sort (list (list-tail a half)))))))))

(define eval_library
  (lambda (vals-lst)
    (if (not (equal? 1 (length vals-lst)))
        (error 'TypeError "eval expected 1 arguments, got ~a" (length vals-lst))
        '())
    (let ((s (car vals-lst)))
      (if (a-thunk? s)
          (set! s (value-of-thunk s))
          '())
      (define lex-this (lambda (lexer input) (lambda () (lexer input))))
      (eval (simple-math-parser (lex-this simple-math-lexer (open-input-string s))) (add-libraries)))))


(define add-libraries
  (lambda ()
    (define env (init-env))
    (set! env (extend-env 'pow pow env))
    (set! env (extend-env 'make_list make_list env))
    (set! env (extend-env 'reverse reverse env))
    (set! env (extend-env 'reverse_all reverse_all env))
    (set! env (extend-env 'set set env))
    (set! env (extend-env 'merge merge env))
    (set! env (extend-env 'merge_sort merge_sort env))
    (set! env (extend-env 'eval eval_library env))
    env))

(define evaluate
  (lambda (filename)
  (begin
  (define path filename)
  (define port (open-input-file path))
  (define str (port->string port))
  (define lex-this (lambda (lexer input) (lambda () (lexer input))))
  (define my-lexer (lex-this simple-math-lexer (open-input-string str)))
  (simple-math-parser my-lexer)
  (eval (simple-math-parser (lex-this simple-math-lexer (open-input-string str))) (add-libraries)))))

(evaluate "a.txt")

